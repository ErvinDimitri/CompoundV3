/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BaseBulkerInterface extends utils.Interface {
  functions: {
    "ACTION_CLAIM_REWARD()": FunctionFragment;
    "ACTION_SUPPLY_ASSET()": FunctionFragment;
    "ACTION_SUPPLY_NATIVE_TOKEN()": FunctionFragment;
    "ACTION_TRANSFER_ASSET()": FunctionFragment;
    "ACTION_WITHDRAW_ASSET()": FunctionFragment;
    "ACTION_WITHDRAW_NATIVE_TOKEN()": FunctionFragment;
    "admin()": FunctionFragment;
    "invoke(bytes32[],bytes[])": FunctionFragment;
    "sweepNativeToken(address)": FunctionFragment;
    "sweepToken(address,address)": FunctionFragment;
    "transferAdmin(address)": FunctionFragment;
    "wrappedNativeToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACTION_CLAIM_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACTION_SUPPLY_ASSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACTION_SUPPLY_NATIVE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACTION_TRANSFER_ASSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACTION_WITHDRAW_ASSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACTION_WITHDRAW_NATIVE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invoke",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepNativeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNativeToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ACTION_CLAIM_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACTION_SUPPLY_ASSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACTION_SUPPLY_NATIVE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACTION_TRANSFER_ASSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACTION_WITHDRAW_ASSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACTION_WITHDRAW_NATIVE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNativeToken",
    data: BytesLike
  ): Result;

  events: {
    "AdminTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminTransferred"): EventFragment;
}

export type AdminTransferredEvent = TypedEvent<
  [string, string],
  { oldAdmin: string; newAdmin: string }
>;

export type AdminTransferredEventFilter =
  TypedEventFilter<AdminTransferredEvent>;

export interface BaseBulker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseBulkerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACTION_CLAIM_REWARD(overrides?: CallOverrides): Promise<[string]>;

    ACTION_SUPPLY_ASSET(overrides?: CallOverrides): Promise<[string]>;

    ACTION_SUPPLY_NATIVE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    ACTION_TRANSFER_ASSET(overrides?: CallOverrides): Promise<[string]>;

    ACTION_WITHDRAW_ASSET(overrides?: CallOverrides): Promise<[string]>;

    ACTION_WITHDRAW_NATIVE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    invoke(
      actions: BytesLike[],
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepNativeToken(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepToken(
      recipient: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<[string]>;
  };

  ACTION_CLAIM_REWARD(overrides?: CallOverrides): Promise<string>;

  ACTION_SUPPLY_ASSET(overrides?: CallOverrides): Promise<string>;

  ACTION_SUPPLY_NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

  ACTION_TRANSFER_ASSET(overrides?: CallOverrides): Promise<string>;

  ACTION_WITHDRAW_ASSET(overrides?: CallOverrides): Promise<string>;

  ACTION_WITHDRAW_NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  invoke(
    actions: BytesLike[],
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepNativeToken(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepToken(
    recipient: string,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrappedNativeToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ACTION_CLAIM_REWARD(overrides?: CallOverrides): Promise<string>;

    ACTION_SUPPLY_ASSET(overrides?: CallOverrides): Promise<string>;

    ACTION_SUPPLY_NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

    ACTION_TRANSFER_ASSET(overrides?: CallOverrides): Promise<string>;

    ACTION_WITHDRAW_ASSET(overrides?: CallOverrides): Promise<string>;

    ACTION_WITHDRAW_NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    invoke(
      actions: BytesLike[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    sweepNativeToken(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepToken(
      recipient: string,
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminTransferred(address,address)"(
      oldAdmin?: string | null,
      newAdmin?: string | null
    ): AdminTransferredEventFilter;
    AdminTransferred(
      oldAdmin?: string | null,
      newAdmin?: string | null
    ): AdminTransferredEventFilter;
  };

  estimateGas: {
    ACTION_CLAIM_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    ACTION_SUPPLY_ASSET(overrides?: CallOverrides): Promise<BigNumber>;

    ACTION_SUPPLY_NATIVE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    ACTION_TRANSFER_ASSET(overrides?: CallOverrides): Promise<BigNumber>;

    ACTION_WITHDRAW_ASSET(overrides?: CallOverrides): Promise<BigNumber>;

    ACTION_WITHDRAW_NATIVE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    invoke(
      actions: BytesLike[],
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepNativeToken(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepToken(
      recipient: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrappedNativeToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTION_CLAIM_REWARD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACTION_SUPPLY_ASSET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACTION_SUPPLY_NATIVE_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACTION_TRANSFER_ASSET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACTION_WITHDRAW_ASSET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACTION_WITHDRAW_NATIVE_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    invoke(
      actions: BytesLike[],
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepNativeToken(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepToken(
      recipient: string,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrappedNativeToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
