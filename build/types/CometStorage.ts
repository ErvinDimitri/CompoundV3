/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CometStorageInterface extends utils.Interface {
  functions: {
    "isAllowed(address,address)": FunctionFragment;
    "liquidatorPoints(address)": FunctionFragment;
    "totalsCollateral(address)": FunctionFragment;
    "userBasic(address)": FunctionFragment;
    "userCollateral(address,address)": FunctionFragment;
    "userNonce(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "isAllowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatorPoints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalsCollateral",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userBasic", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userCollateral",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "userNonce", values: [string]): string;

  decodeFunctionResult(functionFragment: "isAllowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatorPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBasic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userNonce", data: BytesLike): Result;

  events: {};
}

export interface CometStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CometStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isAllowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidatorPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, number] & {
        numAbsorbs: number;
        numAbsorbed: BigNumber;
        approxSpend: BigNumber;
        _reserved: number;
      }
    >;

    totalsCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSupplyAsset: BigNumber;
        _reserved: BigNumber;
      }
    >;

    userBasic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number] & {
        principal: BigNumber;
        baseTrackingIndex: BigNumber;
        baseTrackingAccrued: BigNumber;
        assetsIn: number;
        _reserved: number;
      }
    >;

    userCollateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; _reserved: BigNumber }
    >;

    userNonce(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  isAllowed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidatorPoints(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, number] & {
      numAbsorbs: number;
      numAbsorbed: BigNumber;
      approxSpend: BigNumber;
      _reserved: number;
    }
  >;

  totalsCollateral(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalSupplyAsset: BigNumber;
      _reserved: BigNumber;
    }
  >;

  userBasic(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number] & {
      principal: BigNumber;
      baseTrackingIndex: BigNumber;
      baseTrackingAccrued: BigNumber;
      assetsIn: number;
      _reserved: number;
    }
  >;

  userCollateral(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { balance: BigNumber; _reserved: BigNumber }
  >;

  userNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    isAllowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidatorPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, number] & {
        numAbsorbs: number;
        numAbsorbed: BigNumber;
        approxSpend: BigNumber;
        _reserved: number;
      }
    >;

    totalsCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSupplyAsset: BigNumber;
        _reserved: BigNumber;
      }
    >;

    userBasic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number] & {
        principal: BigNumber;
        baseTrackingIndex: BigNumber;
        baseTrackingAccrued: BigNumber;
        assetsIn: number;
        _reserved: number;
      }
    >;

    userCollateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { balance: BigNumber; _reserved: BigNumber }
    >;

    userNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    isAllowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidatorPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalsCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBasic(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userCollateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userNonce(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isAllowed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidatorPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalsCollateral(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBasic(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCollateral(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userNonce(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
