/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AssetConfigStruct = {
  asset: string;
  priceFeed: string;
  decimals: BigNumberish;
  borrowCollateralFactor: BigNumberish;
  liquidateCollateralFactor: BigNumberish;
  liquidationFactor: BigNumberish;
  supplyCap: BigNumberish;
};

export type AssetConfigStructOutput = [
  string,
  string,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  asset: string;
  priceFeed: string;
  decimals: number;
  borrowCollateralFactor: BigNumber;
  liquidateCollateralFactor: BigNumber;
  liquidationFactor: BigNumber;
  supplyCap: BigNumber;
};

export type ConfigurationStruct = {
  governor: string;
  pauseGuardian: string;
  baseToken: string;
  baseTokenPriceFeed: string;
  extensionDelegate: string;
  supplyKink: BigNumberish;
  supplyPerYearInterestRateSlopeLow: BigNumberish;
  supplyPerYearInterestRateSlopeHigh: BigNumberish;
  supplyPerYearInterestRateBase: BigNumberish;
  borrowKink: BigNumberish;
  borrowPerYearInterestRateSlopeLow: BigNumberish;
  borrowPerYearInterestRateSlopeHigh: BigNumberish;
  borrowPerYearInterestRateBase: BigNumberish;
  storeFrontPriceFactor: BigNumberish;
  trackingIndexScale: BigNumberish;
  baseTrackingSupplySpeed: BigNumberish;
  baseTrackingBorrowSpeed: BigNumberish;
  baseMinForRewards: BigNumberish;
  baseBorrowMin: BigNumberish;
  targetReserves: BigNumberish;
  assetConfigs: AssetConfigStruct[];
};

export type ConfigurationStructOutput = [
  string,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  AssetConfigStructOutput[]
] & {
  governor: string;
  pauseGuardian: string;
  baseToken: string;
  baseTokenPriceFeed: string;
  extensionDelegate: string;
  supplyKink: BigNumber;
  supplyPerYearInterestRateSlopeLow: BigNumber;
  supplyPerYearInterestRateSlopeHigh: BigNumber;
  supplyPerYearInterestRateBase: BigNumber;
  borrowKink: BigNumber;
  borrowPerYearInterestRateSlopeLow: BigNumber;
  borrowPerYearInterestRateSlopeHigh: BigNumber;
  borrowPerYearInterestRateBase: BigNumber;
  storeFrontPriceFactor: BigNumber;
  trackingIndexScale: BigNumber;
  baseTrackingSupplySpeed: BigNumber;
  baseTrackingBorrowSpeed: BigNumber;
  baseMinForRewards: BigNumber;
  baseBorrowMin: BigNumber;
  targetReserves: BigNumber;
  assetConfigs: AssetConfigStructOutput[];
};

export interface CometModifiedFactoryInterface extends utils.Interface {
  functions: {
    "clone((address,address,address,address,address,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint104,uint104,uint104,(address,address,uint8,uint64,uint64,uint64,uint128)[]))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clone",
    values: [ConfigurationStruct]
  ): string;

  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;

  events: {};
}

export interface CometModifiedFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CometModifiedFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clone(
      config: ConfigurationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  clone(
    config: ConfigurationStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    clone(
      config: ConfigurationStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    clone(
      config: ConfigurationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clone(
      config: ConfigurationStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
