/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RewardOwedStruct = { token: string; owed: BigNumberish };

export type RewardOwedStructOutput = [string, BigNumber] & {
  token: string;
  owed: BigNumber;
};

export interface CometRewardsInterface extends utils.Interface {
  functions: {
    "claim(address,address,bool)": FunctionFragment;
    "claimTo(address,address,address,bool)": FunctionFragment;
    "getRewardOwed(address,address)": FunctionFragment;
    "governor()": FunctionFragment;
    "rewardConfig(address)": FunctionFragment;
    "rewardsClaimed(address,address)": FunctionFragment;
    "setRewardConfig(address,address)": FunctionFragment;
    "setRewardConfigWithMultiplier(address,address,uint256)": FunctionFragment;
    "setRewardsClaimed(address,address[],uint256[])": FunctionFragment;
    "transferGovernor(address)": FunctionFragment;
    "withdrawToken(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTo",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardOwed",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardConfig",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsClaimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardConfig",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardConfigWithMultiplier",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsClaimed",
    values: [string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardOwed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardConfigWithMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "GovernorTransferred(address,address)": EventFragment;
    "RewardClaimed(address,address,address,uint256)": EventFragment;
    "RewardsClaimedSet(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernorTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimedSet"): EventFragment;
}

export type GovernorTransferredEvent = TypedEvent<
  [string, string],
  { oldGovernor: string; newGovernor: string }
>;

export type GovernorTransferredEventFilter =
  TypedEventFilter<GovernorTransferredEvent>;

export type RewardClaimedEvent = TypedEvent<
  [string, string, string, BigNumber],
  { src: string; recipient: string; token: string; amount: BigNumber }
>;

export type RewardClaimedEventFilter = TypedEventFilter<RewardClaimedEvent>;

export type RewardsClaimedSetEvent = TypedEvent<
  [string, string, BigNumber],
  { user: string; comet: string; amount: BigNumber }
>;

export type RewardsClaimedSetEventFilter =
  TypedEventFilter<RewardsClaimedSetEvent>;

export interface CometRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CometRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      comet: string,
      src: string,
      shouldAccrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTo(
      comet: string,
      src: string,
      to: string,
      shouldAccrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardOwed(
      comet: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    rewardConfig(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        token: string;
        rescaleFactor: BigNumber;
        shouldUpscale: boolean;
        multiplier: BigNumber;
      }
    >;

    rewardsClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setRewardConfig(
      comet: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardConfigWithMultiplier(
      comet: string,
      token: string,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsClaimed(
      comet: string,
      users: string[],
      claimedAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferGovernor(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    comet: string,
    src: string,
    shouldAccrue: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTo(
    comet: string,
    src: string,
    to: string,
    shouldAccrue: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardOwed(
    comet: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  rewardConfig(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber] & {
      token: string;
      rescaleFactor: BigNumber;
      shouldUpscale: boolean;
      multiplier: BigNumber;
    }
  >;

  rewardsClaimed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setRewardConfig(
    comet: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardConfigWithMultiplier(
    comet: string,
    token: string,
    multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsClaimed(
    comet: string,
    users: string[],
    claimedAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferGovernor(
    newGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      comet: string,
      src: string,
      shouldAccrue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTo(
      comet: string,
      src: string,
      to: string,
      shouldAccrue: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardOwed(
      comet: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<RewardOwedStructOutput>;

    governor(overrides?: CallOverrides): Promise<string>;

    rewardConfig(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber] & {
        token: string;
        rescaleFactor: BigNumber;
        shouldUpscale: boolean;
        multiplier: BigNumber;
      }
    >;

    rewardsClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardConfig(
      comet: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardConfigWithMultiplier(
      comet: string,
      token: string,
      multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsClaimed(
      comet: string,
      users: string[],
      claimedAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferGovernor(
      newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovernorTransferred(address,address)"(
      oldGovernor?: string | null,
      newGovernor?: string | null
    ): GovernorTransferredEventFilter;
    GovernorTransferred(
      oldGovernor?: string | null,
      newGovernor?: string | null
    ): GovernorTransferredEventFilter;

    "RewardClaimed(address,address,address,uint256)"(
      src?: string | null,
      recipient?: string | null,
      token?: string | null,
      amount?: null
    ): RewardClaimedEventFilter;
    RewardClaimed(
      src?: string | null,
      recipient?: string | null,
      token?: string | null,
      amount?: null
    ): RewardClaimedEventFilter;

    "RewardsClaimedSet(address,address,uint256)"(
      user?: string | null,
      comet?: string | null,
      amount?: null
    ): RewardsClaimedSetEventFilter;
    RewardsClaimedSet(
      user?: string | null,
      comet?: string | null,
      amount?: null
    ): RewardsClaimedSetEventFilter;
  };

  estimateGas: {
    claim(
      comet: string,
      src: string,
      shouldAccrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTo(
      comet: string,
      src: string,
      to: string,
      shouldAccrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardOwed(
      comet: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    rewardConfig(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rewardsClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardConfig(
      comet: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardConfigWithMultiplier(
      comet: string,
      token: string,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsClaimed(
      comet: string,
      users: string[],
      claimedAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferGovernor(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      comet: string,
      src: string,
      shouldAccrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTo(
      comet: string,
      src: string,
      to: string,
      shouldAccrue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardOwed(
      comet: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardConfig(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsClaimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardConfig(
      comet: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardConfigWithMultiplier(
      comet: string,
      token: string,
      multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsClaimed(
      comet: string,
      users: string[],
      claimedAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferGovernor(
      newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
