/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SimplePriceFeed,
  SimplePriceFeedInterface,
} from "../SimplePriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "answer_",
        type: "int256",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId_",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId_",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer_",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt_",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound_",
        type: "uint80",
      },
    ],
    name: "setRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a0806040523461007157601f61037438819003918201601f19168301916001600160401b0383118484101761007657808492604094855283398101031261007157602081519101519060ff82168203610071576001556080526040516102e7908161008d8239608051816101f30152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081631c12940a14610217578163313ce567146101da5750806354fd4d50146101ba5780637284e416146100f45780639a6fc8f5146100aa5763feaf968c1461006657600080fd5b346100a657826003193601126100a6579154600154600254600354935494519485946100a2946001600160501b0392831694919392168661027e565b0390f35b8280fd5b50346100a65760203660031901126100a6576001600160501b03928235929084841684036100f15750906100a291600154946002549060035492541692519586958661027e565b80fd5b5082346100f157806003193601126100f157815192838301906001600160401b038211858310176101a757508293919352601f81526020907f4d6f636b20436861696e6c696e6b2070726963652061676772656761746f7200828201528251938285938452825192838286015282915b84831061018f5750508210610183575b50601f01601f19168101030190f35b83828401015284610174565b81830181015188840188015287955091820191610164565b634e487b7160e01b835260419052602482fd5b8382346101d657816003193601126101d6576020905160018152f35b5080fd5b8490346101d657816003193601126101d65760209060ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b849084346100a65760a03660031901126100a6576001600160501b0381358181169081900361027a5760843591821680920361027a5784546001600160501b03199081169091178555602435600155604435600255606435600355825416179055f35b8480fd5b6001600160501b039182168152602081019290925260408201929092526060810192909252909116608082015260a0019056fea2646970667358221220655d10a3e0a5f8762c3a3cc31e455fd34c8cacb35b03c1ddcd366405d9e3827c64736f6c634300080f0033";

type SimplePriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimplePriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimplePriceFeed__factory extends ContractFactory {
  constructor(...args: SimplePriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    answer_: BigNumberish,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SimplePriceFeed> {
    return super.deploy(
      answer_,
      decimals_,
      overrides || {}
    ) as Promise<SimplePriceFeed>;
  }
  getDeployTransaction(
    answer_: BigNumberish,
    decimals_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(answer_, decimals_, overrides || {});
  }
  attach(address: string): SimplePriceFeed {
    return super.attach(address) as SimplePriceFeed;
  }
  connect(signer: Signer): SimplePriceFeed__factory {
    return super.connect(signer) as SimplePriceFeed__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimplePriceFeedInterface {
    return new utils.Interface(_abi) as SimplePriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimplePriceFeed {
    return new Contract(address, _abi, signerOrProvider) as SimplePriceFeed;
  }
}
