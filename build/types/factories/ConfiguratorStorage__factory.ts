/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConfiguratorStorage,
  ConfiguratorStorageInterface,
} from "../ConfiguratorStorage";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346100155760f8908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c9081630c340a2414609b57508063395c0fda14605b576354fd4d5014603e57600080fd5b346058578060031936011260585760209054604051908152f35b80fd5b503460585760203660031901126058576001600160a01b0360043581811690819003609757826040916020945260038452205416604051908152f35b8280fd5b90503460be578160031936011260be576002546001600160a01b03168152602090f35b5080fdfea26469706673582212209573da31ff138af75c3ff9c096fffa41975b8684a1f14b05dd0bba2937eee2a364736f6c634300080f0033";

type ConfiguratorStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConfiguratorStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConfiguratorStorage__factory extends ContractFactory {
  constructor(...args: ConfiguratorStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConfiguratorStorage> {
    return super.deploy(overrides || {}) as Promise<ConfiguratorStorage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConfiguratorStorage {
    return super.attach(address) as ConfiguratorStorage;
  }
  connect(signer: Signer): ConfiguratorStorage__factory {
    return super.connect(signer) as ConfiguratorStorage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConfiguratorStorageInterface {
    return new utils.Interface(_abi) as ConfiguratorStorageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConfiguratorStorage {
    return new Contract(address, _abi, signerOrProvider) as ConfiguratorStorage;
  }
}
