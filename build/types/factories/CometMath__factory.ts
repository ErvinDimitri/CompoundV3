/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CometMath, CometMathInterface } from "../CometMath";

const _abi = [
  {
    inputs: [],
    name: "InvalidInt104",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInt256",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidUInt104",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidUInt128",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidUInt64",
    type: "error",
  },
  {
    inputs: [],
    name: "NegativeNumber",
    type: "error",
  },
];

const _bytecode =
  "0x60808060405234601357603f908160198239f35b600080fdfe6080604052600080fdfea26469706673582212204d4bf655c9cb3461cfd294de6f46e44775ce1d19be9322714be5047a3e01ea4a64736f6c634300080f0033";

type CometMathConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CometMathConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CometMath__factory extends ContractFactory {
  constructor(...args: CometMathConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CometMath> {
    return super.deploy(overrides || {}) as Promise<CometMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CometMath {
    return super.attach(address) as CometMath;
  }
  connect(signer: Signer): CometMath__factory {
    return super.connect(signer) as CometMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CometMathInterface {
    return new utils.Interface(_abi) as CometMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CometMath {
    return new Contract(address, _abi, signerOrProvider) as CometMath;
  }
}
