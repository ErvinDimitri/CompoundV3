/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultiplicativePriceFeed,
  MultiplicativePriceFeedInterface,
} from "../MultiplicativePriceFeed";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "priceFeedA_",
        type: "address",
      },
      {
        internalType: "address",
        name: "priceFeedB_",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "description_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "BadDecimals",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInt256",
    type: "error",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "combinedScale",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedA",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedB",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeedScale",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610120604090808252346200042e5762000b4c803803809162000023828562000449565b83398101906080818303126200042e576200003e816200046d565b6020906200004e8284016200046d565b916200005c86850162000482565b60608501516001600160401b03959192918682116200042e570191601f938785850112156200042e5783518781116200043357895194601f1999620000a8868c8a860116018862000449565b8287528583830101116200042e578185916000905b8282106200041457501162000405575b50508060a0528560c052885163313ce56760e01b80825260049785838a8160018060a01b038098165afa928315620003fa5786928a91600095620003b5575b508d5195869384928352165afa918215620003aa5760009262000364575b5060ff8091169116908160ff0381116200034f576200014a910162000491565b6001600160ff1b0381116200033f5760e052601260ff8216116200032f5760805281519485116200031a576000546001948582811c921680156200030f575b83831014620002fa5750838111620002af575b50809285116001146200024557508394509083929160009462000239575b50501b916000199060031b1c1916176000555b620001dd60ff6080511662000491565b90610100918252516106929182620004ba8339608051826102cb015260a05182818161028301526104a8015260c05182818161033d01526104ea015260e051828181610306015261056c01525181818161023101526105440152f35b015192503880620001ba565b9294849081166000805284600020946000905b888383106200029457505050106200027a575b505050811b01600055620001cd565b015160001960f88460031b161c191690553880806200026b565b85870151885590960195948501948793509081019062000258565b60008052816000208480880160051c820192848910620002f0575b0160051c019085905b828110620002e35750506200019c565b60008155018590620002d3565b92508192620002ca565b602290634e487b7160e01b6000525260246000fd5b91607f169162000189565b604184634e487b7160e01b6000525260246000fd5b8751630456c65960e51b81528590fd5b885163e7e828ad60e01b81528690fd5b601187634e487b7160e01b6000525260246000fd5b90918482813d8311620003a2575b6200037e818362000449565b810103126200039f575060ff62000396819262000482565b9291506200012a565b80fd5b503d62000372565b8a513d6000823e3d90fd5b84819495929693503d8311620003f2575b620003d2818362000449565b810103126200039f57509088620003ea879362000482565b93386200010c565b503d620003c6565b8c513d6000823e3d90fd5b600091860101523883620000cd565b92809250818401015182828a0101520182908692620000bd565b600080fd5b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200043357604052565b51906001600160a01b03821682036200042e57565b519060ff821682036200042e57565b60ff16604d8111620004a357600a0a90565b634e487b7160e01b600052601160045260246000fdfe60806040818152600436101561001457600080fd5b600091823560e01c90816314c04ff114610329575080632b9357df146102ef578063313ce567146102b2578063383cae1d1461026f57806354fd4d50146102545780635fd4c7c51461021a5780637284e416146100eb578063feaf968c146100a35763ffa1ad741461008557600080fd5b3461009f578160031936011261009f576020905160018152f35b5080fd5b503461009f578160031936011261009f5760a0906100bf610484565b85516001600160501b039586168152602081019490945294830191909152606082015291166080820152f35b503461009f578160031936011261009f578051918080549160019083821c91808516948515610210575b60209586851081146101fc5784895288939291879082156101dc5750506001146101a0575b5061014a9250959295038261036c565b8251938285938452825192838286015282915b848310610188575050821061017c575b50601f01601f19168101030190f35b8382840101523861016d565b8183018101518884018801528795509182019161015d565b8591508480528185209085915b8583106101c457505061014a93508201013861013a565b8054838b0185015289945087939092019181016101ad565b60ff19168582015261014a95151560051b850101925038915061013a9050565b634e487b7160e01b86526022600452602486fd5b92607f1692610115565b503461009f578160031936011261009f57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461009f578160031936011261009f576020905160018152f35b503461009f578160031936011261009f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461009f578160031936011261009f576020905160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461009f578160031936011261009f57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83903461009f578160031936011261009f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b601f909101601f19168101906001600160401b0382119082101761038f57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160501b03821682036103b957565b600080fd5b908160a09103126103b9576103d2816103a5565b916020820151916040810151916103f06080606084015193016103a5565b90565b60008082138184136001600160ff1b0382821686820486111661045c57600160ff1b92848712929083168685058812166104705786858712940586129084161661045c57859005841291161661044857500290565b634e487b7160e01b81526011600452602490fd5b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b85526011600452602485fd5b604051633fabe5a360e21b80825290916001600160a01b039160a0919082856004817f000000000000000000000000000000000000000000000000000000000000000088165afa94851561062a57600095610636575b50829060046040518096819382527f0000000000000000000000000000000000000000000000000000000000000000165afa90811561062a5760009485908695879588956105ec575b5050600081138015906105e1575b6105d75761056991610542916103f3565b7f0000000000000000000000000000000000000000000000000000000000000000906103f3565b947f00000000000000000000000000000000000000000000000000000000000000009081156105c157600160ff1b87146000198314166105ab57950593929190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b5050600093929190565b506000821315610531565b93965093509550506106139250803d10610623575b61060b818361036c565b8101906103be565b9395919490939290913880610523565b503d610601565b6040513d6000823e3d90fd5b8391955061065090823d84116106235761060b818361036c565b505050905094906104da56fea2646970667358221220462f9de3a865fadc4be5f48d25f752bb89b49e406f1acc7f414dd36a846b6ef164736f6c634300080f0033";

type MultiplicativePriceFeedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiplicativePriceFeedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiplicativePriceFeed__factory extends ContractFactory {
  constructor(...args: MultiplicativePriceFeedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    priceFeedA_: string,
    priceFeedB_: string,
    decimals_: BigNumberish,
    description_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MultiplicativePriceFeed> {
    return super.deploy(
      priceFeedA_,
      priceFeedB_,
      decimals_,
      description_,
      overrides || {}
    ) as Promise<MultiplicativePriceFeed>;
  }
  getDeployTransaction(
    priceFeedA_: string,
    priceFeedB_: string,
    decimals_: BigNumberish,
    description_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      priceFeedA_,
      priceFeedB_,
      decimals_,
      description_,
      overrides || {}
    );
  }
  attach(address: string): MultiplicativePriceFeed {
    return super.attach(address) as MultiplicativePriceFeed;
  }
  connect(signer: Signer): MultiplicativePriceFeed__factory {
    return super.connect(signer) as MultiplicativePriceFeed__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiplicativePriceFeedInterface {
    return new utils.Interface(_abi) as MultiplicativePriceFeedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiplicativePriceFeed {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultiplicativePriceFeed;
  }
}
