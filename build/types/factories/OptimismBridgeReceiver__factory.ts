/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OptimismBridgeReceiver,
  OptimismBridgeReceiverInterface,
} from "../OptimismBridgeReceiver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "crossDomainMessenger_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "BadData",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedToSendNativeToken",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCrossDomainMessenger",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidProposalId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTimelockAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "ProposalNotExecutable",
    type: "error",
  },
  {
    inputs: [],
    name: "TransactionAlreadyQueued",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferOutFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "govTimelock",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "localTimelock",
        type: "address",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oldCrossDomainMessenger",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newCrossDomainMessenger",
        type: "address",
      },
    ],
    name: "NewCrossDomainMessenger",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "rootMessageSender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "string[]",
        name: "signatures",
        type: "string[]",
      },
      {
        indexed: false,
        internalType: "bytes[]",
        name: "calldatas",
        type: "bytes[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "eta",
        type: "uint256",
      },
    ],
    name: "ProposalCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ProposalExecuted",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newCrossDomainMessenger",
        type: "address",
      },
    ],
    name: "changeCrossDomainMessenger",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "crossDomainMessenger",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "executeProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "govTimelock",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_govTimelock",
        type: "address",
      },
      {
        internalType: "address",
        name: "_localTimelock",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "localTimelock",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "eta",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "executed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "state",
    outputs: [
      {
        internalType: "enum BaseBridgeReceiver.ProposalState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "sweepNativeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "sweepToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461007857601f611a2638819003918201601f19168301916001600160401b0383118484101761007d5780849260209460405283398101031261007857516001600160a01b0381169081900361007857600480546001600160a01b03191691909117905560405161199290816100948239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040526004361015610018575b610016610d42565b005b60003560e01c8063013cf08b146101085780630d61b519146100ff578063158ef93e146100f657806322086dbe146100ed578063258836fe146100e45780633e4f49e6146100db578063485cc955146100d2578063793332d6146100c9578063824343dd146100c0578063b660c156146100b7578063da35c664146100ae5763f43b36130361000e576100a96106f5565b61000e565b506100a96106d6565b506100a9610653565b506100a9610629565b506100a96105b0565b506100a961049b565b506100a961046b565b506100a9610397565b506100a9610334565b506100a9610301565b506100a9610156565b50346101515760203660031901126101515760043560005260036020526060604060002080549060ff600660058301549201541690604051928352602083015215156040820152f35b600080fd5b5034610151576020366003190112610151576004803561017581610bb9565b916000926101828461044b565b61018b8161044b565b6102e757600082815260036020526040902060068101805460ff191660019081179091559060038101928181019180840191600282019160050188865b6101f9575b8989604051907f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f8383a2f35b8985548210156102e1578187828b89896102ac968a8f99610277816102708161026a8f8261025a6102456102969961023f61023a61023a6102609754610328565b610328565b9e6107f1565b905460039190911b1c6001600160a01b031690565b9a6107f1565b90549060031b1c90565b996107f1565b50996107f1565b508c5490604051998a9889978896630825f38f60e01b885287016109b4565b03925af180156102d4575b6102b2575b506107be565b906101c8565b6102cd903d808f833e6102c58183610736565b810190610886565b50386102a6565b6102dc61077b565b6102a1565b506101cd565b604051633c7e994560e11b8152fd5b600091031261015157565b503461015157600036600319011261015157602060ff60015460a01c166040519015158152f35b6001600160a01b031690565b5034610151576000366003190112610151576000546040516001600160a01b039091168152602090f35b6001600160a01b0381160361015157565b919082604091031261015157602082356103888161035e565b9201356103948161035e565b90565b5034610151576103a836600461036f565b6103b661023a600154610328565b330361043a576040516370a0823160e01b81523060048201526100169290916020836024816001600160a01b0385165afa92831561042d575b6000936103fd575b50610c95565b61041f91935060203d8111610426575b6104178183610736565b810190610b9e565b91386103f7565b503d61040d565b61043561077b565b6103ef565b6040516282b42960e81b8152600490fd5b6003111561045557565b634e487b7160e01b600052602160045260246000fd5b503461015157602036600319011261015157610488600435610bb9565b6040516003821015610455576020918152f35b5034610151576104ac36600461036f565b906104bd60015460ff9060a01c1690565b61059f576040516303e1469160e61b81526001600160a01b0383811691602081600481865afa908115610592575b600091610564575b5081309116036105525761051460009461050d8587610788565b6001610788565b6001805460ff60a01b1916600160a01b17905560405192167f3cd5ec01b1ae7cfec6ca1863e2cd6aa25d6d1702825803ff2b7cc95010fffdc28484a3f35b6040516336e038cd60e21b8152600490fd5b610585915060203d811161058b575b61057d8183610736565b810190610766565b386104f3565b503d610573565b61059a61077b565b6104eb565b60405162dc149f60e41b8152600490fd5b5034610151576020366003190112610151576004356105ce8161035e565b6001546001600160a01b0391908216330361043a57600480549183166001600160a01b0319831681179091556040516000939092167fb08c5f7c2da6622db1a15d4c66943d7d24affac11e640a991fb4c3eaa9e431138484a3f35b5034610151576000366003190112610151576001546040516001600160a01b039091168152602090f35b5034610151576020366003190112610151576004356106718161035e565b6001546001600160a01b0316330361043a57600080809247604051915af13d156106d1573d61069f81610827565b906106ad6040519283610736565b8152600060203d92013e5b156106bf57005b60405163d1a4579f60e01b8152600490fd5b6106b8565b5034610151576000366003190112610151576020600254604051908152f35b5034610151576000366003190112610151576004546040516001600160a01b039091168152602090f35b50634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b0382119082101761075957604052565b61076161071f565b604052565b9081602091031261015157516103948161035e565b506040513d6000823e3d90fd5b80546001600160a01b0319166001600160a01b03909216919091179055565b50634e487b7160e01b600052601160045260246000fd5b60019060001981146107ce570190565b6107d66107a7565b0190565b50634e487b7160e01b600052603260045260246000fd5b805482101561080a575b60005260206000200190600090565b6108126107da565b6107fb565b906108256040519283610736565b565b6020906001600160401b038111610844575b601f01601f19160190565b61084c61071f565b610839565b918091926000905b82821061087157501161086a575050565b6000910152565b91508060209183015181860152018291610859565b602081830312610151578051906001600160401b038211610151570181601f820112156101515780516108b881610827565b926108c66040519485610736565b81845260208284010111610151576103949160208085019101610851565b90600182811c92168015610914575b60208310146108fe57565b634e487b7160e01b600052602260045260246000fd5b91607f16916108f3565b906000929180549161092f836108e4565b9182825260019384811690816000146109915750600114610951575b50505050565b90919394506000526020928360002092846000945b83861061097d57505050500101903880808061094b565b805485870183015294019385908201610966565b9294505050602093945060ff191683830152151560051b0101903880808061094b565b959493906080936109f1936109e39260018060a01b03168952602089015260a0604089015260a088019061091e565b90868203606088015261091e565b930152565b9060405191828154918282526020928383019160005283600020936000905b828210610a2b5750505061082592500383610736565b855484526001958601958895509381019390910190610a15565b6020906001600160401b038111610a5e575b60051b0190565b610a6661071f565b610a57565b908154610a7781610a45565b92604093610a8785519182610736565b828152809460208092019260005281600020906000935b858510610aad57505050505050565b60018481928451610ac981610ac2818a61091e565b0382610736565b815201930194019391610a9e565b90604051610ae660e082610736565b8092805482526001808201604051908192815490818452602080940192600052836000209160005b818110610b825750505050610825949383610b7b93610b3360c0966006950383610736565b860152610b42600282016109f6565b6040860152610b5360038201610a6b565b6060860152610b6460048201610a6b565b6080860152600581015460a0860152015460ff1690565b1515910152565b83546001600160a01b0316855293850193928201928201610b0e565b90816020910312610151575190565b811981116107ce570190565b60025481118015610c8d575b610c7b57610be1610be691600390600052602052604060002090565b610ad7565b60c081015115610bf65750600290565b600460a0610c3d9201516020610c1361023a61023a600154610328565b6040516360d143f160e11b815293849182905afa918215610c6e575b600092610c4e575b50610bad565b421115610c4957600190565b600090565b610c6791925060203d8111610426576104178183610736565b9038610c37565b610c7661077b565b610c2f565b604051630992f7ad60e01b8152600490fd5b508015610bc5565b6001600160a01b03939290841690813b156101515760405194859363a9059cbb60e01b855216600484015260248301528160446000958680945af18015610d35575b610d1b575b503d8015610d1057602014610cef575080fd5b90602081803e515b15610cfe57565b60405163cefaffeb60e01b8152600490fd5b509050600019610cf7565b80610d2984610d2f93610736565b806102f6565b38610cdc565b610d3d61077b565b610cd7565b600480546001600160a01b0390811633036110ed5760408051636e296e4560e01b8152926000926020908186848188335af19586156110e0575b85966110c1575b50610d9161023a8654610328565b95169485036110b357610da43685611224565b9390929682518851036110a35783518851036110a35784518851036110a357600195610e048184610ddb61023a61023a8c54610328565b8b51630d48571f60e31b815292839182905afa908115611096575b8491611079575b5042610bad565b9682815b610eb2575b505050918796959391610e82610ead96947f216ba108683905cf17ff4c7b04b9711edbdf8ebf5cc06eeecee4b5d5e7c3c6d29a610e4b6002546107be565b9384600255610e5a60e0610817565b94855284015283898401528460608401528560808401528660a084015260c083019015159052565b610ea181610e9c8151600390600052602052604060002090565b611766565b519551968796876118d6565b0390a2565b8a5181101561107457838582808d8f828f8f8f8f84958d54610ed390610328565b610edc90610328565b610ee590610328565b99610eef916112f2565b516001600160a01b031694610f03916112f2565b5196610f0e916112f2565b5193610f19916112f2565b51935193849388850196610f2d9488611339565b03601f1981018252610f3f9082610736565b5190208d5163f2b0653760e01b815287810191825293849291839190829060200103925af1908115611067575b859161103a575b5061102a576110018189878a8f8f8f8a610fec8f93928e93610fd18b8f9e8f90610fca81610fc4610fb782610fb161023a61023a610fca9954610328565b9f6112f2565b516001600160a01b031690565b9b6112f2565b519b6112f2565b519051633a66f90160e01b8152998a98899788968701611339565b03925af1801561101d575b61100757506107be565b90610e08565b6102cd90883d8a11610426576104178183610736565b61102561077b565b610ff7565b89516333108cbb60e01b81528390fd5b61105a9150863d8811611060575b6110528183610736565b810190611376565b38610f73565b503d611048565b61106f61077b565b610f6c565b610e0d565b6110909150853d8711610426576104178183610736565b38610dfd565b61109e61077b565b610df6565b865163a554dcdf60e01b81528690fd5b5090516282b42960e81b8152fd5b6110d9919650823d841161058b5761057d8183610736565b9438610d83565b6110e861077b565b610d7c565b5060405163128d7cbd60e21b8152fd5b81601f820112156101515780359161111483610a45565b926111226040519485610736565b808452602092838086019260051b820101928311610151578301905b82821061114c575050505090565b8135815290830190830161113e565b92919261116782610827565b916111756040519384610736565b829481845281830111610151578281602093846000960137010152565b81601f82011215610151578035906111a982610a45565b926040926111b984519586610736565b808552602093848087019260051b8501019383851161015157858101925b8584106111e8575050505050505090565b83356001600160401b03811161015157820185603f820112156101515787916112198783878680960135910161115b565b8152019301926111d7565b91608083830312610151576001600160401b039083358281116101515784019383601f8601121561015157843561125a81610a45565b906112686040519283610736565b808252602096878084019260051b820101918783116101515788809201905b8382106112d957505050509481013583811161015157846112a99183016110fd565b93604082013584811161015157816112c2918401611192565b936060830135908111610151576103949201611192565b82809183356112e78161035e565b815201910190611287565b6020918151811015611307575b60051b010190565b61130f6107da565b6112ff565b9060209161132d81518092818552858086019101610851565b601f01601f1916010190565b959493906080936109f1936113689260018060a01b03168952602089015260a0604089015260a0880190611314565b908682036060880152611314565b90816020910312610151575180151581036101515790565b50634e487b7160e01b600052600060045260246000fd5b8181106113b0575050565b600081556001016113a5565b918181106113c957505050565b61082592600052602060002091820191016113a5565b815191600160401b8311611431575b6113fd838354818555846113bc565b602080910191600052806000206000925b84841061141c575050505050565b6001838282935185550192019301929061140e565b61143961071f565b6113ee565b90600091808352602083209182548160011b9185199060031b1c191617905555565b9190601f811161146f57505050565b610825926000526020600020906020601f840160051c8301931061149b575b601f0160051c01906113a5565b909150819061148e565b90929192611587575b82516001600160401b03811161157a575b6114d3816114cd84546108e4565b84611460565b602080601f831160011461150f575081929394600092611504575b50508160011b916000199060031b1c1916179055565b0151905038806114ee565b90601f1983169561152585600052602060002090565b926000905b88821061156257505083600195969710611549575b505050811b019055565b015160001960f88460031b161c1916905538808061153f565b8060018596829496860151815501950193019061152a565b61158261071f565b6114bf565b61158f61138e565b6114ae565b815191600160401b8311611677575b81548383558084106115f6575b506115c5602080920192600052602060002090565b600080935b8585106115d957505050505050565b600184826115ea83945186886114a5565b019301940193916115ca565b6000838152846020822092830192015b8281106116145750506115b0565b80611621600192546108e4565b8061162e575b5001611606565b601f9081811184146116465750508281555b38611627565b836116689261165a85600052602060002090565b920160051c820191016113a5565b611672838261143e565b611640565b61167f61071f565b6115a3565b815191600160401b8311611759575b81548383558084106116e6575b506116b5602080920192600052602060002090565b600080935b8585106116c957505050505050565b600184826116da83945186886114a5565b019301940193916116ba565b6000838152846020822092830192015b8281106117045750506116a0565b80611711600192546108e4565b8061171e575b50016116f6565b601f9081811184146117365750508281555b38611717565b8361174a9261165a85600052602060002090565b611754838261143e565b611730565b61176161071f565b611693565b90805182556001808301602090818401519180835193600160401b8511611840575b611797858554818755866113bc565b0191600052806000206000925b8484106118145750505050505090600661180160c0846117ce6040610825970151600287016113df565b6117df606082015160038701611594565b6117f0608082015160048701611684565b60a081015160058601550151151590565b91019060ff801983541691151516179055565b805182546001600160a01b0319166001600160a01b0391909116178255928501929085019082016117a4565b61184861071f565b611788565b90815180825260208080930193019160005b82811061186d575050505090565b83518552938101939281019260010161185f565b90815180825260208092019182818360051b85019501936000915b8483106118ac5750505050505090565b90919293949584806118c683856001950387528a51611314565b980193019301919493929061189c565b96959493929060c0880190885260209060c0828a015283518091528160e08a0194019160005b82811061193f57505050506109f19261192383611931938a60a098960360408c015261184d565b9088820360608a0152611881565b908682036080880152611881565b83516001600160a01b0316865294810194928101926001016118fc56fea264697066735822122050634c44b8737cb9768230d4e798c28a2cbf923605b4c72044c26b8e2b5b30d164736f6c634300080f0033";

type OptimismBridgeReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptimismBridgeReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptimismBridgeReceiver__factory extends ContractFactory {
  constructor(...args: OptimismBridgeReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    crossDomainMessenger_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OptimismBridgeReceiver> {
    return super.deploy(
      crossDomainMessenger_,
      overrides || {}
    ) as Promise<OptimismBridgeReceiver>;
  }
  getDeployTransaction(
    crossDomainMessenger_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(crossDomainMessenger_, overrides || {});
  }
  attach(address: string): OptimismBridgeReceiver {
    return super.attach(address) as OptimismBridgeReceiver;
  }
  connect(signer: Signer): OptimismBridgeReceiver__factory {
    return super.connect(signer) as OptimismBridgeReceiver__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptimismBridgeReceiverInterface {
    return new utils.Interface(_abi) as OptimismBridgeReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptimismBridgeReceiver {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OptimismBridgeReceiver;
  }
}
