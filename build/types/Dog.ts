/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PuppersStruct = { index: BigNumberish; pup: string };

export type PuppersStructOutput = [BigNumber, string] & {
  index: BigNumber;
  pup: string;
};

export interface DogInterface extends utils.Interface {
  functions: {
    "addPup(address)": FunctionFragment;
    "father()": FunctionFragment;
    "initializeDog(string,address,address[])": FunctionFragment;
    "initialized()": FunctionFragment;
    "name()": FunctionFragment;
    "puppers()": FunctionFragment;
    "pups(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addPup", values: [string]): string;
  encodeFunctionData(functionFragment: "father", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeDog",
    values: [string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "puppers", values?: undefined): string;
  encodeFunctionData(functionFragment: "pups", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addPup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "father", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeDog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "puppers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pups", data: BytesLike): Result;

  events: {};
}

export interface Dog extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DogInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPup(
      pup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    father(overrides?: CallOverrides): Promise<[string]>;

    initializeDog(
      name_: string,
      father_: string,
      pups_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    puppers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pups(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  addPup(
    pup: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  father(overrides?: CallOverrides): Promise<string>;

  initializeDog(
    name_: string,
    father_: string,
    pups_: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  puppers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pups(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addPup(pup: string, overrides?: CallOverrides): Promise<void>;

    father(overrides?: CallOverrides): Promise<string>;

    initializeDog(
      name_: string,
      father_: string,
      pups_: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    puppers(overrides?: CallOverrides): Promise<PuppersStructOutput[]>;

    pups(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addPup(
      pup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    father(overrides?: CallOverrides): Promise<BigNumber>;

    initializeDog(
      name_: string,
      father_: string,
      pups_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    puppers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pups(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addPup(
      pup: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    father(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeDog(
      name_: string,
      father_: string,
      pups_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    puppers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pups(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
